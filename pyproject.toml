
[build-system]
requires = ['flit_core >=3.4,<4']
build-backend = 'flit_core.buildapi'

[project]
name = 'execflow'
dynamic = ['version']
authors = [
    {name = 'louisponet', email = 'louisponet@epfl.ch'},
    {name = 'Francesca L. Bleken', email = 'francesca.l.bleken@sintef.no'},
    {name = 'Casper Welzel Andersen', email = 'casper.w.andersen@sintef.no'},
]
readme = 'README.md'
license = {file = 'LICENSE'}
description = "openmodel execflow"
classifiers = [
    'License :: OSI Approved :: MIT License',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
]
requires-python = '>=3.9,<3.12'

dependencies = [
    'aiida-core==2.1.0',
    'cryptography~=42.0',
    'aiida-pseudo~=1.5.0',
    'aiida-shell~=0.6.0',
    'cachecontrol>=0.14.0,<1',
    'chevron>=0.14.0,<1',
    'DLite-Python>=0.5.1,<1',
    'eval-type-backport>=0.2.0,<1; python_version < "3.10"',
    'jsonref==1.1.0',
    'jsonschema>=3.2.0,<5',
    'oteapi-core>=0.6.1,<1',
    'oteapi-dlite>=0.2.2,<1',
]

[project.optional-dependencies]
dev = [
    "pre-commit~=3.7",
    "pytest~=8.2",
    "pytest-cov~=5.0",
    "pgtest~=1.3",
]

[project.urls]
Home = 'https://github.com/H2020-OpenModel/ExecFlow'
Source = 'https://github.com/H2020-OpenModel/ExecFlow'

[project.entry-points.'aiida.data']
'execflow.oteapi_pipeline'      = 'execflow.data.oteapi.declarative_pipeline:OTEPipelineData'
'execflow.dataresourceconfig'   = 'execflow.data.oteapi.resourceconfig:ResourceConfigData'
'execflow.filterconfig'         = 'execflow.data.oteapi.filterconfig:FilterConfigData'
'execflow.functionconfig'       = 'execflow.data.oteapi.functionconfig:FunctionConfigData'
'execflow.mappingconfig'        = 'execflow.data.oteapi.mappingconfig:MappingConfigData'
'execflow.transformationconfig' = 'execflow.data.oteapi.transformationconfig:TransformationConfigData'

[project.entry-points.'aiida.calculations']
'execflow.data.CUDS2DataNode' = 'execflow.data.cuds:CUDS2DataNode'
'execflow.dataresource_init'  = 'execflow.oteapi_strategies.dataresource:init_dataresource'
'execflow.dataresource_get'   = 'execflow.oteapi_strategies.dataresource:get_dataresource'
'execflow.filter_init'        = 'execflow.oteapi_strategies.filter:init_filter'
'execflow.filter_get'         = 'execflow.oteapi_strategies.filter:get_filter'
'execflow.mapping_init'       = 'execflow.oteapi_strategies.mapping:init_mapping'
'execflow.mapping_get'        = 'execflow.oteapi_strategies.mapping:get_mapping'
'execflow.parse_oteapi_pipeline'     = 'execflow.calculations.parse_oteapi_pipeline:parse_oteapi_pipeline'
'execflow.update_oteapi_session'     = 'execflow.calculations.update_oteapi_session:update_oteapi_session'
'execflow.fake_qe_pw' = 'execflow.calculations.fake:FakeQEPW'

[project.entry-points.'oteapi.function']
'execflow.aiidacuds/cuds2datanode' = 'execflow.data.cuds:CUDS2DataNodeStrategy'
'execflow.aiidacuds/datanode2cuds' = 'execflow.data.cuds:DataNode2CUDSStrategy'
'execflow.aiidacuds/file2collection' = 'execflow.data.file2collection:File2CollectionStrategy'


[project.entry-points.'aiida.workflows']
'execflow.declarative'         = 'execflow.workchains.declarative_chain:DeclarativeChain'
'execflow.oteapipipeline'      = 'execflow.workchains.oteapi_pipeline:OTEPipeline'
'execflow.exec_wrapper'        = 'execflow.workchains.exec_wrapper:ExecWrapper'
'execflow.function_init'       = 'execflow.oteapi_strategies.function:init_function'
'execflow.function_get'        = 'execflow.oteapi_strategies.function:get_function'
'execflow.transformation_init' = 'execflow.oteapi_strategies.transformation:init_transformation'
'execflow.transformation_get'  = 'execflow.oteapi_strategies.transformation:get_transformation'

[tool.flit.module]
name = 'execflow'

[tool.flynt]
line-length = 120
fail-on-change = true

[tool.black]
line-length = 120

[tool.isort]
include_trailing_comma = true
multi_line_output = 3  # this configuration is compatible with yapf

[tool.pydocstyle]
ignore = [
    'D104',
    'D202',
    'D203',
    'D213'
]

[tool.mypy]
python_version = "3.9"
ignore_missing_imports = true
scripts_are_modules = true
warn_unused_configs = true
show_error_codes = true
allow_redefinition = true
plugins = ["pydantic.mypy"]

[tool.setuptools.package-data]
execflow = [
    "entities/*.json"
]

[tool.ruff]
line-length = 120

[tool.ruff.lint]
extend-select = [
    "E",  # pycodestyle
    "F",  # Pyflakes
    "B",  # flake8-bugbear
    "I",  # isort
    "BLE",  # flake8-blind-except
    "ARG",  # flake8-unused-arguments
    "C4",  # flake8-comprehensions
    "ICN",  # flake8-import-conventions
    "G",  # flake8-logging-format
    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    "PL",  # pylint
    "PT",  # flake8-pytest-style
    "PTH",  # flake8-use-pathlib
    "RET",  # flake8-return
    "RUF",  # Ruff-specific
    "SIM",  # flake8-simplify
    "YTT",  # flake8-2020
    "EXE",  # flake8-executable
    "PYI",  # flake8-pyi
    "FLY",  # flynt
]
ignore = [
    "PLR",  # Design related pylint codes
    "PLW0127",  # pylint: Self-assignment of variables
]

[tool.ruff.lint.isort]
# Import __future__.annotations for all Python files.
required-imports = ["from __future__ import annotations"]
force-sort-within-sections = true

[tool.pytest.ini_options]
minversion = "8.2"
addopts = "-rs"# --cov=execflow --cov-report=term-missing:skip-covered --no-cov-on-fail"
filterwarnings = [
    # Treat all warnings as errors
    "error",

    # Ignore warnings from or related to the aiida-core package
    "ignore::UserWarning:aiida.*",
    "ignore::aiida.common.warnings.AiidaDeprecationWarning:",
    "ignore::cryptography.utils.CryptographyDeprecationWarning:",

    # Ignore warnings from the SQLAlchemy package
    "ignore::sqlalchemy.exc.SAWarning:",

    # Ignore generic warnings
    "ignore::ResourceWarning:",
    "ignore::DeprecationWarning:",
]
